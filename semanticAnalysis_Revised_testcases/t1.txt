** Test case 1: Testing symbol table creation for variable declaration and redeclaration checks**
** Single level nesting using primitive data types**
** While test **

<<module while_demo>>
takes input [x:integer, w: boolean, p:real];
returns [m:integer, n:integer, u: boolean];
start
	declare a,b:integer;
	a:= 5;
	get_value(b);
	declare value, q, r: real;
	get_value(q);
	r:= 23.67e+2;
	value:= p+q*r; 
	m:=a + x;
	u:= a<=b;
	declare w: integer;			**Not an error as a local variable can shadow the input parameter**
	w:= 23;                                 **not an error as type of w is integer now**
	n:= a*25+100;

	while(w < a +5 *6 +b)
	start
		m:= w + 5;	
		m := b;			**No type error as well as type of w is now taken as integer**
	end
end





<<<driver program>>>
start
	declare v_1_2_3:integer;
	get_value(v_1_2_43);				**ERROR: variable v_1_2_43 is not declared**		
	declare result_, v7, v9:integer;
	declare v10:real;
	declare u1:boolean;
	print(result_);
	declare u1: real;				**ERROR: variable u1 is re-declared**
end


